name: CMake

on: [pull_request, push]

concurrency:
  group: ${{ github.workflow }}-${{ github.head_ref || github.ref }}
  cancel-in-progress: true

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-22.04
            name: Linux
            container: wpilib/roborio-cross-ubuntu:2024-22.04
            flags: "-DCMAKE_BUILD_TYPE=Release -DWITH_EXAMPLES=ON"
          - os: macOS-14
            name: macOS
            container: ""
            env: "PATH=\"/opt/homebrew/opt/protobuf@3/bin:$PATH\""
            flags: "-DCMAKE_BUILD_TYPE=Release -DWITH_JAVA=OFF -DWITH_EXAMPLES=ON -DCMAKE_LIBRARY_PATH=/opt/homebrew/opt/protobuf@3/lib -DProtobuf_INCLUDE_DIR=/opt/homebrew/opt/protobuf@3/include -DProtobuf_PROTOC_EXECUTABLE=/opt/homebrew/opt/protobuf@3/bin/protoc"

    name: "Build - ${{ matrix.name }}"
    runs-on: ${{ matrix.os }}
    container: ${{ matrix.container }}
    steps:
      - name: Install dependencies (Linux)
        if: runner.os == 'Linux'
        run: sudo apt-get update && sudo apt-get install -y libopencv-dev libopencv4.5-java libprotobuf-dev protobuf-compiler ninja-build

      - name: Install dependencies (macOS)
        run: brew install opencv protobuf@3 ninja
        if: runner.os == 'macOS'

      - name: Run sccache-cache
        uses: mozilla-actions/sccache-action@v0.0.5

      - uses: actions/checkout@v4

      - name: configure
        run: cmake -S . -B build -G "Ninja" -DCMAKE_C_COMPILER_LAUNCHER=sccache -DCMAKE_CXX_COMPILER_LAUNCHER=sccache ${{ matrix.flags }}
        env:
          SCCACHE_GHA_ENABLED: "true"

      - name: build
        working-directory: build
        run: cmake --build . --parallel $(nproc)
        env:
          SCCACHE_GHA_ENABLED: "true"

      - name: test
        working-directory: build
        run: ctest --output-on-failure

  build-windows:
    name: "Build - Windows"
    runs-on: windows-2022
    steps:
      - uses: ilammy/msvc-dev-cmd@v1.13.0

      - name: Install CMake
        uses: lukka/get-cmake@v3.29.3

      - name: Run sccache-cache
        uses: mozilla-actions/sccache-action@v0.0.5

      - uses: actions/checkout@v4

      - name: Run vcpkg
        uses: lukka/run-vcpkg@v11.5
        with:
          vcpkgDirectory: ${{ runner.workspace }}/vcpkg
          vcpkgGitCommitId: 37c3e63a1306562f7f59c4c3c8892ddd50fdf992 # HEAD on 2024-02-24

      - name: configure
        run: cmake -S . -B build -G "Ninja" -DCMAKE_C_COMPILER_LAUNCHER=sccache -DCMAKE_CXX_COMPILER_LAUNCHER=sccache -DCMAKE_BUILD_TYPE=Release -DWITH_JAVA=OFF -DWITH_EXAMPLES=ON -DUSE_SYSTEM_FMTLIB=ON -DUSE_SYSTEM_LIBUV=ON -DUSE_SYSTEM_EIGEN=OFF -DCMAKE_TOOLCHAIN_FILE=${{ runner.workspace }}/vcpkg/scripts/buildsystems/vcpkg.cmake -DVCPKG_INSTALL_OPTIONS=--clean-after-build -DVCPKG_TARGET_TRIPLET=x64-windows-release -DVCPKG_HOST_TRIPLET=x64-windows-release
        env:
          SCCACHE_GHA_ENABLED: "true"

      - name: build
        working-directory: build
        run: cmake --build . --parallel $(nproc)
        env:
          SCCACHE_GHA_ENABLED: "true"

      - name: test
        working-directory: build
        # UnitTest_test segfaults on exit occasionally
        run: ctest --output-on-failure -E 'UnitTest'

  build-maven:
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-22.04
            name: Linux
            container: wpilib/roborio-cross-ubuntu:2024-22.04
            flags: "--toolchain ./cmake/toolchains/arm-frc-gnueabi.toolchain.cmake -DCMAKE_BUILD_TYPE=RelWithDebInfo -DWITH_TESTS=OFF -DWITH_SIMULATION_MODULES=OFF -DBUILD_MAVEN=ON -DCMAKE_INSTALL_PREFIX=~/wpilib -DWITH_GUI=OFF -DJAVA_INCLUDE_PATH=/tmp/jni/ -DJAVA_INCLUDE_PATH2=/tmp/jni/ -DJAVA_JVM_LIBRARY=$JAVA_HOME/lib/libjvm.so -DProtobuf_LIBRARIES=/usr/lib/x86_64-linux-gnu -DProtobuf_INCLUDE_DIR=/usr/include"
          - os: macOS-14
            name: macOS
            container: ""
            env: "PATH=\"/opt/homebrew/opt/protobuf@3/bin:$PATH\""
            flags: "-DCMAKE_BUILD_TYPE=RelWithDebInfo -DWITH_EXAMPLES=ON -DBUILD_MAVEN=ON -DCMAKE_INSTALL_PREFIX=~/wpilib -DCMAKE_LIBRARY_PATH=/opt/homebrew/opt/protobuf@3/lib -DProtobuf_INCLUDE_DIR=/opt/homebrew/opt/protobuf@3/include -DProtobuf_PROTOC_EXECUTABLE=$(pwd)/bin/protoc -DPROTOC_COMPILER=$(pwd)/bin/protoc"
          - os: windows-2022
            name: Windows
            container: ""
            flags: "-DCMAKE_BUILD_TYPE=RelWithDebInfo -DWITH_EXAMPLES=ON -DBUILD_MAVEN=ON -DCMAKE_INSTALL_PREFIX=C:/wpilib -DProtobuf_INCLUDE_DIR=wpiutil/src/main/native/thirdparty/protobuf/include -DProtobuf_PROTOC_EXECUTABLE=bin/protoc -DPROTOC_COMPILER=bin/protoc"

    name: "Build - ${{ matrix.name }} with Maven"
    runs-on: ${{ matrix.os }}
    container: ${{ matrix.container }}
    steps:
      - name: Install dependencies (Linux)
        if: runner.os == 'Linux'
        run: sudo apt-get update && sudo apt-get install -y libprotobuf-dev ninja-build

      - name: Install dependencies (macOS)
        run: brew install protobuf@3 ninja
        if: runner.os == 'macOS'

      - uses: ilammy/msvc-dev-cmd@v1.13.0
        if: runner.os == 'Windows'

      - name: Setup protoc (Linux)
        if: runner.os == 'Linux'
        run: |
          wget https://github.com/protocolbuffers/protobuf/releases/download/v21.12/protoc-21.12-linux-x86_64.zip
          unzip protoc-21.12-linux-x86_64.zip
          sudo mv ./bin/protoc /usr/bin

      - name: Setup protoc (macOS)
        if: runner.os == 'macOS'
        run: |
          curl -LO https://github.com/protocolbuffers/protobuf/releases/download/v21.12/protoc-21.12-osx-universal_binary.zip
          unzip protoc-21.12-osx-universal_binary.zip
          export PATH=$(pwd)/bin/:$PATH

      - name: Setup protoc (Windows)
        if: runner.os == 'Windows'
        run: |
          curl -LO https://github.com/protocolbuffers/protobuf/releases/download/v21.12/protoc-21.12-win64.zip
          tar -xf protoc-21.12-win64.zip
          echo "Path=$(pwd)\;$env:Path" >> "$env:GITHUB_ENV"

      - name: Download JNI headers (Linux)
        if: runner.os == 'Linux'
        run: |
          mkdir /tmp/jni/
          wget https://raw.githubusercontent.com/openjdk/jdk21/master/src/java.base/unix/native/include/jni_md.h -O /tmp/jni/jni_md.h
          wget https://raw.githubusercontent.com/openjdk/jdk21/master/src/java.base/share/native/include/jni.h -O /tmp/jni/jni.h

      - name: Install CMake
        if: runner.os == 'Windows'
        uses: lukka/get-cmake@v3.29.3

      - name: Run sccache-cache
        uses: mozilla-actions/sccache-action@v0.0.5

      - uses: actions/checkout@v4

      - name: configure
        run: cmake -S . -B build -G "Ninja" -DCMAKE_C_COMPILER_LAUNCHER=sccache -DCMAKE_CXX_COMPILER_LAUNCHER=sccache ${{ matrix.flags }}
        env:
          SCCACHE_GHA_ENABLED: "true"

      - name: build
        working-directory: build
        run: cmake --build . --parallel $(nproc) --target install
        env:
          SCCACHE_GHA_ENABLED: "true"

      - name: test
        if: runner.os != 'Windows'
        working-directory: build
        run: ctest --output-on-failure

      - name: test (Windows)
        if: runner.os == 'Windows'
        working-directory: build
        # UnitTest_test segfaults on exit occasionally
        run: ctest --output-on-failure -E 'UnitTest'
